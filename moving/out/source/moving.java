/* autogenerated by Processing revision 1293 on 2024-09-18 */
import processing.core.*;
import processing.data.*;
import processing.event.*;
import processing.opengl.*;

import java.util.HashMap;
import java.util.ArrayList;
import java.io.File;
import java.io.BufferedReader;
import java.io.PrintWriter;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.IOException;

public class moving extends PApplet {

<<<<<<< Updated upstream
public float[][] MatrixMul(float A[][], float B[][]) {
  float [][] Mat = new float [4][4];
  for (int i=0; i<4; i++) {
    for (int j=0; j<4; j++) {
      for (int k=0; k<4; k++) {
        Mat[i][j] += A[i][k]*B[k][j];
=======


int time3;
int base_time3;
int head1 = 0;
int final_error_msg;

public void setup() {
  /* size commented out by preprocessor */;
  background(255);
  base_time3 = millis();
  // ボタンを作成
}

public void draw() {
  background(255);
  time3 = millis() -  base_time3;
  //errorButton.display();
  if (head1 == 0){
    showErrorDialogs("Microsoft Windows", "Windows was not installed correctly. Please reinstall Windows.\nError 4(Windows error 2021D)", 5500, 74, 50); // 10個のエラーメッセージを0.05秒ごとに表示
    head1 = 1;
  }
  if (time3 > 8700){
    //exit();
  }
  
}



public void showErrorDialogs(String title, String message, int totalDuration, int error_num, int interval) {
  new Thread(new Runnable() {
    public void run() {
      javax.swing.JDialog[] dialogs = new javax.swing.JDialog[error_num];
      int startX = 0;
      int startY = 100;
      int offsetX = 20;
      int offsetY = 20;
      for (int error_count = 0; error_count < error_num; error_count++) {
        final_error_msg = error_count;
        if (error_count >= 25){
          offsetY = ((error_count - 25)*20) - 50;
          offsetX = ((error_count - 25)*20) + 250;
          if (error_count > 51){
          offsetY = ((error_count - 51)*20) - 100;
          offsetX = ((error_count - 51)*20) + 500;
          }
        }
        else {
          offsetY = error_count * 20;
          offsetX = error_count * 20;
        }
        final int index = error_count;
        final int x = startX + offsetX;
        final int y = startY + offsetY;
        javax.swing.SwingUtilities.invokeLater(new Runnable() {
          public void run() {
            if (final_error_msg ==73){
              JOptionPane pane = new JOptionPane("重大なエラーが発生しました\n5秒後に初期化します", JOptionPane.WARNING_MESSAGE);
              dialogs[index] = pane.createDialog(title);
              dialogs[index].setModal(false); // 非モーダルに設定
              dialogs[index].setAlwaysOnTop(true); // ダイアログを最前面に設定
              dialogs[index].setVisible(true);
            }
            else {
              JOptionPane pane = new JOptionPane(message, JOptionPane.ERROR_MESSAGE);
              dialogs[index] = pane.createDialog(title);
              dialogs[index].setModal(false); // 非モーダルに設定
              dialogs[index].setAlwaysOnTop(true); // ダイアログを最前面に設定
              dialogs[index].setLocation(x,y); // ダイアログの位置を設定
              dialogs[index].setVisible(true);
            }
          }
        });
        try {
          Thread.sleep(interval); // 次のダイアログを表示するまで待機
        } catch (InterruptedException e) {
          e.printStackTrace();
        }
      }
      try {
        Thread.sleep(totalDuration); // 全てのダイアログを表示した後、指定された時間待機
      } catch (InterruptedException e) {
        e.printStackTrace();
      }
      for (javax.swing.JDialog dialog : dialogs) {
        if (dialog != null) {
          dialog.dispose(); // 全てのダイアログを閉じる
        }
>>>>>>> Stashed changes
      }
    }
  }
  return Mat;
}

public float[][] MatrixI() {
  float [][] Mat = new float [4][4];
  Mat[0][0] = 1;
  Mat[1][1] = 1;
  Mat[2][2] = 1;
  Mat[3][3] = 1;
  return Mat;
}


public float[][] MatrixRotateX(float a) {
  float [][] Mat = new float [4][4];
  Mat[0][0] = 1;
  Mat[1][1] = cos(a);
  Mat[1][2] = -sin(a);
  Mat[2][1] = sin(a);
  Mat[2][2] = cos(a);
  Mat[3][3] = 1;
  return Mat;
}

public float[][] MatrixRotateY(float a) {
  float [][] Mat = new float [4][4];
  Mat[0][0] = cos(a);
  Mat[0][2] = sin(a);
  Mat[1][1] = 1;
  Mat[2][0] = -sin(a);
  Mat[2][2] = cos(a);
  Mat[3][3] = 1;
  return Mat;
}

public float[][] MatrixRotateZ(float a) {
  float [][] Mat = new float [4][4];
  Mat[0][0] = cos(a);
  Mat[0][1] = -sin(a);
  Mat[1][0] = sin(a);
  Mat[1][1] = cos(a);
  Mat[2][2] = 1;
  Mat[3][3] = 1;
  return Mat;
}

public float[][] MatrixMove(Vector3D v) {
  float [][] Mat = new float [4][4];
  Mat[0][0] = 1;
  Mat[1][1] = 1;
  Mat[2][2] = 1;
  Mat[3][3] = 1;
  Mat[0][3] = v.x;
  Mat[1][3] = v.y;
  Mat[2][3] = v.z;
  return Mat;
}


public void printMatrix(float[][] mat) {
  for (int i=0; i<4; i++) {
    for (int j=0; j<4; j++) {
      print(mat[i][j]);
      print(", ");
    }
    print("\n");
  }
}


class Vector3D {
  float x, y, z;
  Vector3D(float _x, float _y, float _z) {
    this.x = _x;
    this.y = _y;
    this.z = _z;
  }
  public Vector3D actMatrix(float Mat[][]) {
    Vector3D p = new Vector3D(0, 0, 0);
    p.x = this.x * Mat[0][0] + this.y * Mat[0][1] + this.z * Mat[0][2] + Mat[0][3];
    p.y = this.x * Mat[1][0] + this.y * Mat[1][1] + this.z * Mat[1][2] + Mat[1][3];
    p.z = this.x * Mat[2][0] + this.y * Mat[2][1] + this.z * Mat[2][2] + Mat[2][3];
    return p;
  }
}

float transformMatrix[][] = new float [4][4];
float t = 0;

public void line3D(Vector3D p1, Vector3D p2) {
  Vector3D a1 = p1.actMatrix(transformMatrix);
  Vector3D a2 = p2.actMatrix(transformMatrix);
  //ellipse(a1.x, a1.y, 10, 10); 頂点
  //ellipse(a2.x, a2.y, 10, 10);
  line(a1.x, a1.y, a2.x, a2.y);
}

public void draw(){;
  t += 1;
  background(255);
  translate(width/2, height/2);
  
  int s = 50;
  transformMatrix = MatrixI();
  float mat1[][] = MatrixRotateX(t*0.1f);
  float mat2[][] = MatrixRotateY(t*0.1f);
  transformMatrix = MatrixMul(mat2, transformMatrix);
  transformMatrix = MatrixMul(mat1, transformMatrix);

  Vector3D p1 = new Vector3D(-s, -s, s);
  Vector3D p2 = new Vector3D(-s, s, s);
  Vector3D p3 = new Vector3D(s, s, s);
  Vector3D p4 = new Vector3D(s, -s, s);
  Vector3D p5 = new Vector3D(-s, -s, -s);
  Vector3D p6 = new Vector3D(-s, s, -s);
  Vector3D p7 = new Vector3D(s, s, -s);
  Vector3D p8 = new Vector3D(s, -s, -s);
  stroke(0);
  strokeWeight(3);
  line3D(p1, p2);
  line3D(p2, p3);
  line3D(p3, p4);
  line3D(p4, p1);
  line3D(p5, p6);
  line3D(p6, p7);
  line3D(p7, p8);
  line3D(p8, p5);
  line3D(p1, p5);
  line3D(p2, p6);
  line3D(p3, p7);
  line3D(p4, p8);
}


  static public void main(String[] passedArgs) {
    String[] appletArgs = new String[] { "moving" };
    if (passedArgs != null) {
      PApplet.main(concat(appletArgs, passedArgs));
    } else {
      PApplet.main(appletArgs);
    }
  }
}
